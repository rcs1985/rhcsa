dnf list podman
   16  dnf install podman
   17  dnf list podman
   18  cat /etc/resolv.conf 
   19  ping 8.8.8.8 -f
   20  ping 8.8.8.8
   21  which podman
   22  cat /etc/hosts
   23  dnf install podman-docker
   24  which docker
   25  dnf info podman-docker
   26  docker image
   27  docker images
   28  docker --version
   29  podman --version 
   30  docker 
   31  clear
   32  docker images
   33  exit
   34  history
   35  docker images
   36  w
   37  docker search ubi
   38  docker run --name myubi registry.redhat.io/ubi9/ubi
   39  susbscription identity
   40  cat /etc/os-release 
   41  docker run --name myubi registry.redhat.io/ubi9:latest
   42  ip a
   43  w
   44  hostname
   45  yum search docker
  46  yum install podman
   47  yum install podman-docker
   48  docker run --name myubi registry.redhat.io/ubi9:latest
   49  docker ps -a
   50  docker run --name myubi2 registry.redhat.io/ubi9:latest sleep 5
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~`
 Docker container with an HTTP server, creating a simple HTML file, and testing the server.
   docker ps -> make sure nothing is running
   docker run -d --name myweb5 -p 8080:8080 registry.access.redhat.com/rhscl/httpd-24-rhe17
   docker exec -it myweb5 bash

   $cd /var/www/html (inside the container)
   $cat >index.html
      Welcome to DevOps!!!

   $curl localhost:8080
   $exit
   #docker ps
   #curl localhost:8080
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
setting up a Docker container with a web server, creating a simple HTML file from the host machine, and testing the server.
#docker ps -> clear all the containers
#docker ps -a -> clear everything
#pwd
~/root
#mkdir -p webcontent/html
#cd webcontent/html
$cat > index.html
Webpage created from host machine - Admin
^D
#docker run -d --name mywebPMVM -p 8085:8080 -v /root/webcontent:/var/www:Z registry.access.redhat.com/rhcs1/httpd-24-rhel7
#docker ps
#curl localhost:8085
Webpage created from host machine - Admin (your result)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Task 14th Aug
#docker run -d --name mydb3 -e MYSQL_USER=user1 -e MYSQL_PASSWORD=redhat -e MYSQL_DATABASE=mydb registry.access.redhat.com/rhscl/mariadb-101-rhel7
 =======
 #cat Containerfile
 [root@node1 ~]# cat Containerfile 
 FROM docker.io/redhat/ubi8
 LABEL description='A Test Webserver'
 RUN yum install -y httpd && \ 
	yum clean all
 RUN echo "New webimage" > /var/www/html/index.html
 EXPOSE 80
 CMD ["httpd", "-D", "FOREGROUDN"]
 
 #docker build -t webimg .
 #docker images
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[root@nodel ~]# docker network ls
Emulate Docker CLI using podman. Create /etc/containers/nodocker to quiet msg.
NETWORK ID          NAME                DRIVER
2f259bab93aa        podman              bridge


docker run -d --name myfirstcontainer -p 8080:8080 registry.access.redhat.com/rhscl/httpd-24-rhe17

Login to the mysecondcontainer, and do the following
File path: /var/www/html
Filename: index.html
Add the text: The Ip address of this container is <<IP-Address>>
NOTE: <<IP-Address>> refers to the real IP address of that container.

docker exec -it mysecondcontainer bash
cd /var/www/html
ip addr show eth0 | grep "inet " | awk '{print $2}' | cut -d/ -f1
echo "The IP address of this container is <IP-Address>" > index.html
exit

docker run --name simplecontainer registry.access.redhat.com/ubi9

docker run -d --name dbcontainer -e MYSQL_USER=user1 -e MYSQL_PASSWORD=redhat -e MYSQL_DATABASE=mydb mysql

apiVersion: apps/v1
kind: Deployment
metadata:
  name: echo-exkube
  namespace: exkube
  labels:
    app: echo-studentX
spec:
  replicas: 1
  selector:
    matchLabels:
      app: echo-studentX
  template:
    metadata:
      labels:
        app: echo-studentX
    spec:
      containers:
      - name: echo-exkube-cont
        image: registry.k8s.io/echoserver:1.9
        ports:
        - containerPort: 8080

